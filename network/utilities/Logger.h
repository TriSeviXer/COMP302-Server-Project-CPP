/*
 * Logger.h
 *
 *  Created on: Mar 28, 2022
 *      Author: Michael Bloom & Andrew Juhola
 */

#ifndef LOGGER_H_
#define LOGGER_H_

//Standard C++ Libraries
#include <fstream>	//For handling file input and output.
#include <string>	//For handling strings.

//Macros
#define PATH_LOGS "logs/"	//Default log folder.

class Logger {

	//Variables and Constants
	private:
		static std::ofstream logFile;
		static std::string section;
		static bool isSection;

	//Constructors and destructors.
	public:
		Logger();
		virtual ~Logger();

	//Functions for logging.
	public:


		/**
		 * Binds the log output to a file generated by the logger.
		 */
		static void bindLog();

		/**
		 * Binds the log ouput to a file set by the user.
		 * @param const char is the log file output.
		 */
		static void bindLog(const char *file);

		/**
		 * Starts a logging section.
		 * @param std::string is the name of the section.
		 */
		static void logSection(std::string section);

		/**
		 * Ends logging a section.
		 */
		static void endSection();

		//Functions for logging a message.

		/**
		 * Logs information.
		 * @param std::string is the message for logging.
		 */
		static void logInfo(std::string message);

		/**
		 * Logs a warning.
		 * @param std::string is the message for logging.
		 */
		static void logWarn(std::string message);

		/**
		 * Logs an error.
		 * @param std::string is the message for logging.
		 */
		static void logError(std::string message);

		/**
		 * Logs an error.
		 * @param int is an errno.
		 * @param std::string is the message for logging.
		 */
		static void logError(int err, std::string message);

		/**
		 * Logs an error.
		 * @param std::exception is an exception for logging.
		 * @param std::string is the message for logging.
		 */
		static void logError(std::exception *exception, std::string message);

		/**
		 * Logs an error.
		 * @param int err is an errno.
		 * @param std::exception exception is an exception for logging.
		 * @param std::string is the message for logging.
		 */
		static void logError(int err, std::exception *exception, std::string message);

		/**
		 * Closes the log file.
		 */
		static void closeLog();

	//Internal utilities.
	private:
		static std::string getTimeStamp(std::string logType);

};

#endif /* LOGGER_H_ */
